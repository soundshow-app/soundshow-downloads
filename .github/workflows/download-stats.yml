name: Record release download counts (daily)

on:
  workflow_dispatch: {}
  schedule:
    - cron: "12 2 * * *"   # daily at 02:12 UTC

permissions:
  contents: write

jobs:
  record:
    runs-on: ubuntu-latest
    env:
      REPO: soundshow-app/soundshow-downloads   # <- verify THIS exists & is public, with at least 1 published release
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Collect counts
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          date_utc=$(date -u +%F)
          mkdir -p stats
          repo_file="stats/${REPO#*/}.csv"
          if [ ! -s "$repo_file" ]; then
            echo "date,tag,asset,download_count" > "$repo_file"
          fi

          # --- Call API and capture HTTP status (unauthenticated to avoid any token-scope surprises) ---
          http_code=$(curl -sS -w "%{http_code}" -o releases.json \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/$REPO/releases?per_page=100")

          echo "HTTP $http_code from API"
          # Quick peek for debugging
          printf 'First 200 bytes of payload:\n'; head -c 200 releases.json || true; printf '\n---\n'

          if [ "$http_code" -lt 200 ] || [ "$http_code" -ge 300 ]; then
            echo "GitHub API returned HTTP $http_code:"
            cat releases.json
            exit 1
          fi

          # Ensure payload is an array ([] if no releases)
          if jq -e 'type != "array"' releases.json >/dev/null; then
            echo "Unexpected API response (not an array). Full body:"
            cat releases.json
            exit 1
          fi

          # Append one row per asset (safe even if array is empty)
          jq -r --arg d "$date_utc" '
            .[] as $r
            | ($r.assets // [])[]
            | [$d, ($r.tag_name // ""), .name, (.download_count // 0)]
            | @csv
          ' releases.json >> "$repo_file"

      - name: Commit stats
        shell: bash
        run: |
          git config user.name  "github-actions"
          git config user.email "actions@users.noreply.github.com"
          git add stats/*.csv || true
          git commit -m "stats: $(date -u +%F)" || exit 0
          git push
